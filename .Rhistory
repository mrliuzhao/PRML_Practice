d <- a * dnorm(x = seq10000, mean = -3, sd = 1) +
b * dnorm(x = seq10000, mean = 3, sd = 1)
lines(x = seq10000, y = d, type = 'l', col = 'red')
legend("topright",
legend = c("N(0,1)",
paste(a,'N(-3,1)+',b,'N(3,1)', sep = '')),
col = c('black','red'))
legend("topright",
legend = c("N(0,1)",
paste(a,'N(-3,1)+',b,'N(3,1)', sep = '')),
lty = 1,
col = c('black','red'))
legend("topright",
legend = c("N(0,1)",
paste(a,'N(-3,1)+',b,'N(3,1)', sep = '')),
lty = 1,
col = c('black','red'))
a <- 0.5
b <- 1.5
d <- a * dnorm(x = seq10000, mean = -3, sd = 1) +
b * dnorm(x = seq10000, mean = 3, sd = 1)
lines(x = seq10000, y = d/(a+b), type = 'l', col = 'blue')
legend("topright",
legend = c("N(0,1)",
paste(a,'N(-3,1)+',b,'N(3,1)', sep = '')),
lty = 1,
col = c('black','red'))
# 生成正态分布的衍生分布
seq10000 <- seq(from = -10, to = 10, length.out = 10000)
plot(x = seq10000, y = dnorm(x = seq10000), type = 'l',
main = '正态分布衍生分布', xlab = 'x', ylab = 'density')
a <- 0.5
b <- 0.5
d <- a * dnorm(x = seq10000, mean = -3, sd = 1) +
b * dnorm(x = seq10000, mean = 3, sd = 1)
lines(x = seq10000, y = d, type = 'l', col = 'red')
a <- 0.5
b <- 1.5
d <- a * dnorm(x = seq10000, mean = -3, sd = 1) +
b * dnorm(x = seq10000, mean = 3, sd = 1)
lines(x = seq10000, y = d/(a+b), type = 'l', col = 'blue')
legend("topright",
legend = c("N(0,1)",
'0.5N(-3,1)+0.5N(3,1)',
'(0.5N(-3,1)+1.5N(3,1))/2'),
lty = 1,
col = c('black','red', 'blue'))
?quantile
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = x,y = y,type = 'p',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
plot(x = x,y = y,type = 'l',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
sort(x)
y[rank(x)]
x
rank(x)
y[9]
y
data.frame(x,y)
df <- data.frame(x,y)
View(df)
df[,1]
?sort
?order
order(x)
rank(x)
sort(x)
x[order(x)]
y[order(x)]
plot(x = sort(x),y = y[order(x)],type = 'l',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
'b',
xlim = c(0,1), ylim = c(min(y,-1.0)
plot(x = sort(x),y = y[order(x)],type = 'b',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
# 通过多项式拟合
mod <- lm(y~poly(x,3))
co <- as.vector(mod$coefficients)
co
mod$coefficients
mod
mod$residuals
mod$effects
mod$rank
mod$fitted.values
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
co[1] + (co[2] * x[2]) + (co[3] * x[2] * x[2]) + (co[4] * x[2] * x[2] * x[2])
x
x[2]
co[1]
(co[2] * x[2])
(co[3] * x[2] * x[2])
(co[3] * (x[2]^2))
co[1] + (co[2] * x[2]) + (co[3] * (x[2]^2)) + (co[4] * (x[2]^3))
mod$fitted.values
co[1] + (co[4] * x[2]) + (co[3] * (x[2]^2)) + (co[2] * (x[2]^3))
mod <- lm(y~x)
mod
mod <- lm(y~x)
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
lines(x = x,y = yFit, col = 'green')
lines(x = sort(x),y = yFit[order(x)], col = 'green')
co[1] + (co[4] * x[2]) + (co[3] * (x[2]^2)) + (co[2] * (x[2]^3))
co[1] + (co[2] * x[2])
yFit
mod <- lm(y~poly(x,2))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,2))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
lines(x = sort(x),y = yFit[order(x)], col = 'green')
co[1] + (co[2] * x[2]) + (co[3] * (x[2]^2))
yFit
mod$fitted.values
mod
co[1] + (co[2] * x[2]) + (co[3] * (x[2]^2))
?poly
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1, xlim = c(0, 25))
d <- seq(0, 25, length.out = 200)
for(degree in 1:4) {
fm <- lm(dist ~ poly(speed, degree), data = cars)
assign(paste("cars", degree, sep = "."), fm)
lines(d, predict(fm, data.frame(speed = d)), col = degree)
}
?predict
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,2))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,3))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
lines(seq1000, predict(mod), col = 'green')
data.frame(speed = d)
predict(fm, data.frame(speed = d))
lines(seq1000, predict(mod, seq1000), col = 'green')
data.frame(seq1000)
lines(seq1000, predict(mod, data.frame(seq1000)), col = 'green')
lines(x, predict(mod, data.frame(x)), col = 'green')
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
points(x = x,y = yFit, col = 'green')
lines(sort(x), predict(mod, data.frame(sort(x))), col = 'green')
lines(x, predict(mod, data.frame(x)), col = 'green')
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,3))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
lines(x, predict(mod, data.frame(x)), col = 'green')
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
lines(x, predict(mod, data.frame(x)), col = 'green')
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
points(x, predict(mod, data.frame(x)), col = 'green')
predict(mod, data.frame(x))
yFit <- mod$fitted.values
yFit
lines(x = sort(x), predict(mod, data.frame(sort(x))), col = 'green')
lines(x = sort(x), predict(mod, data.frame(x))[order(x)], col = 'green')
lines(x = sort(x),y = yFit[order(x)], col = 'green')
lines(x = sort(x),y = yFit[order(x)], col = 'blue')
confint(mod, level = 0.95)
mod <- lm(y~x)
confint(mod, level = 0.95)
confint(mod, level = 0.95)
conf <- confint(mod, level = 0.95)
conf
conf[1,1]
conf[1,2]
n <- 100
x <- runif(n, min = 0, max = 10)
deltas <- rnorm(n = n, mean = 0, sd = 5)
y <- 3*x + 4 + deltas
plot(x = x, y = y)
lines(x = c(0,10), y = c(4,34))
mod <- lm(y ~ x)
a <- as.vector(mod$coefficients)[1]
b <- as.vector(mod$coefficients)[2]
yFit <- a + b*x
lines(x = x,y = yFit, col = 'red')
n <- 100
x <- runif(n, min = 0, max = 10)
deltas <- rnorm(n = n, mean = 0, sd = 5)
y <- 3*x + 4 + deltas
plot(x = x, y = y)
lines(x = c(0,10), y = c(4,34))
mod <- lm(y ~ x)
a <- as.vector(mod$coefficients)[1]
b <- as.vector(mod$coefficients)[2]
yFit <- a + b*x
lines(x = sort(x),y = yFit[order(x)], col = 'red')
conf <- confint(mod, level = 0.95)
yFit.low <- conf[1,1] + conf[2,1]*x
yFit.high <- conf[1,2] + conf[2,2]*x
yFit.low
lines(x = sort(x),y = yFit.low[order(x)], col = 'green')
lines(x = sort(x),y = yFit.high[order(x)], col = 'green')
conf
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1, xlim = c(0, 25))
d <- seq(0, 25, length.out = 200)
for(degree in 1:4) {
fm <- lm(dist ~ poly(speed, degree), data = cars)
assign(paste("cars", degree, sep = "."), fm)
lines(d, predict(fm, data.frame(speed = d)), col = degree)
#lines(d, predict(fm, data.frame(speed = d)), col = degree)
}
anova(cars.1, cars.2, cars.3, cars.4)
plot(cars, xlab = "Speed (mph)", ylab = "Stopping distance (ft)",
las = 1, xlim = c(0, 25))
d <- seq(0, 25, length.out = 200)
for(degree in 1:4) {
fm <- lm(dist ~ poly(speed, degree), data = cars)
assign(paste("cars", degree, sep = "."), fm)
#lines(d, predict(fm, data.frame(speed = d)), col = degree)
lines(d, fm$fitted.values, col = degree)
}
anova(cars.1, cars.2, cars.3, cars.4)
fm$fitted.values
cars
View(cars)
assign(paste("cars", degree, sep = "."), fm)
fm
?assign
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,3))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
lines(x = seq1000, predict(mod, data.frame(seq1000)), col = 'green')
#lines(d, predict(fm, data.frame(speed = d)), col = degree)
lines(d, fm$fitted.values, col = degree)
lines(x = seq1000, predict(mod, data.frame(x=seq1000)), col = 'green')
predict(mod, data.frame(x=seq1000))
lines(x = seq1000, y = predict(mod, data.frame(x=seq1000)), col = 'green')
yFit
co[1] + (co[4] * x[2]) + (co[3] * (x[2]^2)) + (co[2] * (x[2]^3))
co[1] + (co[2] * x[2]) + (co[3] * (x[2]^2)) + (co[4] * (x[2]^3))
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,3))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
points(x = x,y = yFit, col = 'green')
yFit
x[1]
x[1]
mod
co[2]
co[1] + (co[2] * x[1]) + (co[3] * (x[1]^2)) + (co[4] * (x[1]^3))
co[1] + (co[2] * x[2]) + (co[3] * (x[2]^2)) + (co[4] * (x[2]^3))
(x[2]^3)
(co[4] * (x[2]^3))
lines(x = sort(x),y = yFit[order(x)], col = 'blue')
lines(x = seq1000, y = predict(mod, data.frame(x=seq1000)), col = 'green')
confint(mod, level = 0.95)
?I
y ~ x
f <- y ~ x
f
summary(mod)
co
lm2 = lm(y~x + I(x^2))
su2 = summary(lm2)
su
su2
mod <- lm(y~poly(x,2))
mod
mod$residuals
lm2$residuals
lm2 = lm(mpg~disp + I(disp^2),data = mtcars)
su2 = summary(lm2)
su2
lm2 = lm(mpg~poly(disp,2),data = mtcars)
su2 = summary(lm2)
su2
?poly
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,3))
mod2 <- lm(y~x + I(x^2) + I(x^3))
co <- as.vector(mod$coefficients)
yFit <- mod$fitted.values
yFit2 <- mod2$fitted.values
co2 <- as.vector(mod2$coefficients)
co
co2
yFit <- mod$fitted.values
yFit2 <- mod2$fitted.values
yFit
yFit2
mod$coefficients
mod2$coefficients
mod$fitted.values
mod2$fitted.values
co2[1] + (co2[2] * x[2]) + (co2[3] * (x[2]^2)) + (co2[4] * (x[2]^3))
x[2]
lines(x = seq1000, y = predict(mod, data.frame(x=seq1000)), col = 'green')
mod$residuals
mod2$residuals
lines(x = seq1000, col = 'blue',
y = co2[1] + (co2[2] * seq1000) +
(co2[3] * (seq1000^2)) + (co2[4] * (seq1000^3)))
lines(x = seq1000, y = predict(mod, data.frame(seq1000)), col = 'green')
lines(x = seq1000, y = predict(mod, data.frame(seq1000)), col = 'green')
lines(x = seq1000, y = predict(mod, data.frame(x=seq1000)), col = 'green')
predict(mod, data.frame(seq1000))
mod
lines(x = seq1000, col = 'blue',
y = co2[1] + (co2[2] * seq1000) +
(co2[3] * (seq1000^2)) + (co2[4] * (seq1000^3)))
points(x = x,y = yFit, col = 'green')
mod2$residuals
mod1$residuals
mod$residuals
mod$fitted.values - y
rms <- sum(mod2$residuals ^ 2)
rms
# 查看最大似然估计法计算出正态总体方差的差异
n <- 100
muTrue <- 0
sigmaTrue <- 2
x <- rnorm(n = n, mean = muTrue, sd = sqrt(sigmaTrue))
muML <- sum(x) / n
sigmaML <- sum((x - muML)^2)/n
# 真实曲线为黑色，拟合曲线为红色
seq1000 <- seq(from = muTrue - 3, to = muTrue + 3,
length.out = 1000)
plot(x = seq1000, col = 'black', type = 'l', ylim = c(0,0.5),
y = dnorm(x = seq1000, mean = muTrue, sd = sqrt(sigmaTrue)))
lines(x = seq1000, col = 'red',
y = dnorm(x = seq1000, mean = muML, sd = sqrt(sigmaML)))
install.packages('latex2exp')
\\
expression(sqrt(x)+ log(y))
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y', main = expression(sqrt(x)+ log(y)),
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
?expression
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y', main = expression('y'+sqrt(x)+ log(y)),
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
length(ex1 <- expression(1 + 0:9)) # 1
ex1
eval(ex1) # 1:10
x <- runif(10)
deltas <- rnorm(n = length(x), mean = 0, sd = 0.1)
y <- sin(2 * pi * x) + deltas
seq1000 <- seq(from = 0, to = 1, length.out = 1000)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,-1.0), max(y,1.0)))
lines(x = seq1000, y = sin(2 * pi * seq1000),col='red')
mod <- lm(y~poly(x,3))
mod2 <- lm(y~x + I(x^2) + I(x^3))
co <- as.vector(mod$coefficients)
co2 <- as.vector(mod2$coefficients)
yFit <- mod$fitted.values
yFit2 <- mod2$fitted.values
points(x = x,y = yFit, col = 'green')
lines(x = seq1000, y = predict(mod, data.frame(x=seq1000)), col = 'green')
lines(x = seq1000, col = 'blue',
y = co2[1] + (co2[2] * seq1000) +
(co2[3] * (seq1000^2)) + (co2[4] * (seq1000^3)))
rms <- sum(mod2$residuals ^ 2)
mod <- lm(y~poly(x,9))
points(x = x,y = yFit, col = 'green')
yFit <- predict(mod, data.frame(x = seq1000))
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,yFit), max(y,yFit)))
lines(x = seq1000, y = yFit, col = 'green')
rms <- sum(mod$residuals ^ 2)
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,yFit), max(y,yFit)))
mod <- lm(y~poly(x,9))
yFit <- mod$fitted.values
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,yFit), max(y,yFit)))
points(x = x,y = yFit, col = 'green')
plot(x = sort(x),y = y[order(x)],type = 'p',
xlab = 'x', ylab = 'y',
xlim = c(0,1), ylim = c(min(y,yFit), max(y,yFit)))
lines(x = seq1000, y = predict(mod, data.frame(x=seq1000)), col = 'green')
rms <- sum(mod$residuals ^ 2)
rms
seq1000 <- seq(from = -5, to = 5, length.out = 1000)
y <- seq1000^2 + (9 / (seq1000^2))
plot(x = seq1000, y = y,type = 'l')
seq1000 <- seq(from = -2, to = 2, length.out = 1000)
y <- seq1000^2 + (9 / (seq1000^2))
plot(x = seq1000, y = y,type = 'l')
seq1000 <- seq(from = -2, to = 2, length.out = 1000)
y <- seq1000^2 + (9 / (seq1000^2))
plot(x = seq1000, y = y,type = 'l', ylim = c(0,1))
seq1000 <- seq(from = -2, to = 2, length.out = 1000)
y <- seq1000^2 + (9 / (seq1000^2))
plot(x = seq1000, y = y,type = 'l', ylim = c(5,10))
?exp
exp(1)
seq1000 <- seq(from = 0, to = 5, length.out = 1000)
y <- exp(seq1000)*seq1000
plot(x = seq1000, y = y,type = 'l')
xSeq <- seq(from = 6 - 8, to = 6 + 8, length.out = 10000)
x <- dnorm(x = xSeq, mean = 6, sd = 1)
xSample <- rnorm(50000, mean = 6, sd = 1)
hist(x = xSample, breaks = 100, freq = FALSE)
lines(x = xSeq, y = x, col = 'red')
ySeq <- 1 / (1 + exp(-xSeq + 5))
# f(x) = N(6,1) = f[g(y)]
y <- x
ySample <- 1 / (1 + exp(-xSample + 5))
hist(x = ySample, breaks = 100, freq = FALSE)
lines(x = ySeq, y = y, col = 'blue')
legend("topleft",
legend = c("f[g(y)]",
'f[g(y)]g\'(y)'),
lty = 1,
col = c('blue','red'))
y <- (1/ySeq + 1/(1-ySeq)) * x
lines(x = ySeq, y = y, col = 'red')
